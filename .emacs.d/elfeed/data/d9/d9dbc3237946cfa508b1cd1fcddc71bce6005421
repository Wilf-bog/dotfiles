
         
         <p><code class="language-plaintext highlighter-rouge">beframe</code> enables a frame-oriented Emacs workflow where each frame has
access to the list of buffers visited therein.  In the interest of
brevity, we call buffers that belong to frames ‚Äúbeframed‚Äù.</p>

<ul>
  <li>Package name (GNU ELPA): <code class="language-plaintext highlighter-rouge">beframe</code></li>
  <li>Official manual: <a href="https://protesilaos.com/emacs/beframe">https://protesilaos.com/emacs/beframe</a></li>
  <li>Change log: <a href="https://protesilaos.com/emacs/beframe-changelog">https://protesilaos.com/emacs/beframe-changelog</a></li>
  <li>Git repo on SourceHut: <a href="https://git.sr.ht/~protesilaos/beframe">https://git.sr.ht/~protesilaos/beframe</a>
    <ul>
      <li>Mirrors:
        <ul>
          <li>GitHub: <a href="https://github.com/protesilaos/beframe">https://github.com/protesilaos/beframe</a></li>
          <li>GitLab: <a href="https://gitlab.com/protesilaos/beframe">https://gitlab.com/protesilaos/beframe</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Mailing list: <a href="https://lists.sr.ht/~protesilaos/general-issues">https://lists.sr.ht/~protesilaos/general-issues</a></li>
  <li>Video demo: <a href="https://protesilaos.com/codelog/2023-02-28-emacs-beframe-demo/">https://protesilaos.com/codelog/2023-02-28-emacs-beframe-demo/</a></li>
  <li>Backronym: Buffers Encapsulated in Frames Realise Advanced
Management of Emacs.</li>
</ul>

<p>Below are the release notes</p>

<hr />

<p>There were no release notes for the initial version of Beframe.  Watch
the video demo I produced on 2023-02-28 to get an overview of what
this package is all about:
<a href="https://protesilaos.com/codelog/2023-02-28-emacs-beframe-demo/">https://protesilaos.com/codelog/2023-02-28-emacs-beframe-demo/</a>.</p>

<p>In short: beframe your buffers, not your outlook.  Oops that is for
the philosophy blog! üôÉ</p>

<h2>A beframed buffer menu</h2>

<p>The command <code class="language-plaintext highlighter-rouge">beframe-buffer-menu</code> produces a dedicated buffer with a
list of buffers for the current frame.  This is the counterpart of
<code class="language-plaintext highlighter-rouge">beframe-switch-buffer</code>.  When called with a prefix argument (<code class="language-plaintext highlighter-rouge">C-u</code>
with default key bindings), it prompts for a frame whose buffers it
will display.</p>

<h2>Frame-specific scratch buffer</h2>

<p>The user option <code class="language-plaintext highlighter-rouge">beframe-create-frame-scratch-buffer</code> allows
<code class="language-plaintext highlighter-rouge">beframe-mode</code> to create a frame-specific scratch buffer that runs the
<code class="language-plaintext highlighter-rouge">initial-major-mode</code>.  This is done upon the creation of a new frame
and the scratch buffer is named after the frame it belongs to.  For
example, if the frame is called <code class="language-plaintext highlighter-rouge">modus-themes</code>, the corresponding
scratch buffer is <code class="language-plaintext highlighter-rouge">*scratch for modus-themes*</code>.  Set this user option
to <code class="language-plaintext highlighter-rouge">nil</code> to disable the creation of such scratch buffers.</p>

<p>The user option <code class="language-plaintext highlighter-rouge">beframe-kill-frame-scratch-buffer</code> is the counterpart
of <code class="language-plaintext highlighter-rouge">beframe-create-frame-scratch-buffer</code>.  It kills the frame-specific
scratch buffer after the frame is deleted.  Set this user option to
<code class="language-plaintext highlighter-rouge">nil</code> to disable the killing of such buffers.</p>

<h2>Assuming and unassuming buffers</h2>

<p>Beframe makes it possible to add or remove buffers from the list of
buffers associated with the current frame.  This provides for a
flexible workflow where buffers can be initially beframed yet
consolidated into new lists on demand.</p>

<h3>Assuming buffers</h3>

<p>To assume buffers is to include them in the buffer list associated
with the current frame.</p>

<ul>
  <li>
    <p>The command <code class="language-plaintext highlighter-rouge">beframe-assume-frame-buffers</code> (alias
<code class="language-plaintext highlighter-rouge">beframe-add-frame-buffers</code>) prompts for a frame and then copies its
buffer list into the current frame.</p>
  </li>
  <li>
    <p>The command <code class="language-plaintext highlighter-rouge">beframe-assume-buffers</code> (alias <code class="language-plaintext highlighter-rouge">beframe-add-buffers</code>)
adds buffers from a given frame to the current frame.  In
interactive use, the command first prompts for a frame and then asks
about the list of buffers therein.  The to-be-assumed buffer list is
compiled with <code class="language-plaintext highlighter-rouge">completing-read-multiple</code>.  This means that the user
can select multiple buffers, each separated by the <code class="language-plaintext highlighter-rouge">crm-separator</code>
(typically a comma).</p>
  </li>
  <li>
    <p>The command <code class="language-plaintext highlighter-rouge">beframe-assume-buffers-all-frames</code> prompts with
minibuffer completion for a list of buffers to assume.  The
interface is the same as that of <code class="language-plaintext highlighter-rouge">beframe-assume-buffers</code> except
that there is no prompt for a frame: buffers belong to the
consolidated buffer list (all frames).</p>
  </li>
  <li>
    <p>The command <code class="language-plaintext highlighter-rouge">beframe-assume-all-buffers-no-prompts</code> unconditionally
assumes the consolidated buffer list.</p>
  </li>
</ul>

<h3>Unassuming buffers</h3>

<p>To unassume buffers is to omit them from the buffer list associated with
the current frame.</p>

<ul>
  <li>
    <p>The command <code class="language-plaintext highlighter-rouge">beframe-unassume-frame-buffers</code> (alias
<code class="language-plaintext highlighter-rouge">beframe-remove-frame-buffers</code>) prompts for a frame and then removes
its buffer list from the current frame.</p>
  </li>
  <li>
    <p>The command <code class="language-plaintext highlighter-rouge">beframe-unassume-buffers</code> (alias
<code class="language-plaintext highlighter-rouge">beframe-remove-buffers</code>) removes buffers from the current frame.
In interactive use, the to-be-unassumed buffer list is compiled with
<code class="language-plaintext highlighter-rouge">completing-read-multiple</code>.  This means that the user can select
multiple buffers, each separated by the <code class="language-plaintext highlighter-rouge">crm-separator</code> (typically a
comma).</p>
  </li>
  <li>
    <p>The command <code class="language-plaintext highlighter-rouge">beframe-unassume-all-buffers-no-prompts</code> unconditionally
unassumes the consolidated buffer list, but preserves the list
stored in the user option <code class="language-plaintext highlighter-rouge">beframe-global-buffers</code>.</p>
  </li>
</ul>

<h2>Sort beframed buffers from Lisp</h2>

<p>This is courtesy of Tony Zorman:
<a href="https://lists.sr.ht/~protesilaos/general-issues/%3C87edq4n3qt.fsf%40hyperspace%3E">https://lists.sr.ht/~protesilaos/general-issues/%3C87edq4n3qt.fsf%40hyperspace%3E</a>.</p>

<blockquote>
  <p>commit dfa4678c208e1e5c41413f2d39416f84c21f28ff
Author: Tony Zorman <a href="mailto:soliditsallgood@mailbox.org">soliditsallgood@mailbox.org</a>
Date:   Sat Mar 4 11:48:17 2023 +0100</p>

  <p>Add the ability to sort the buffer list</p>

  <p>Some completion libraries, like consult, give the user the option to
sort the list of buffers according to some strategy.  For example,
sorting by visibility‚Äîin the sense that one is first shown hidden
buffers, then visible ones, and only then the current buffer‚Äîmay be
preferrable when deciding to switch buffers via consult-buffer.</p>

  <p>Since beframe.el can be used as a consult source (see the manual),
endowing beframe‚Äìbuffer-list with an arbitrary sort function greatly
improves the synergy between the two libraries.</p>

  <p>beframe.el | 56 <del><del><del><del><del><del><del><del><del><del><del><del><del><del><del><del><del><del><del><del>++</del></del></del></del></del></del></del></del></del></del></del></del></del></del></del></del></del></del></del></del>‚Äî‚Äî‚Äî‚Äì‚Äî
1 file changed, 42 insertions(+), 14 deletions(-)</p>
</blockquote>

<p>The manual explains how this works in practice:
<a href="https://protesilaos.com/emacs/beframe#h:1c2d3d64-aa7b-4585-a418-ccedbb548b38">https://protesilaos.com/emacs/beframe#h:1c2d3d64-aa7b-4585-a418-ccedbb548b38</a>.
Thanks to Tony Zorman for including the reference to the sorting mechanism!</p>
        
      