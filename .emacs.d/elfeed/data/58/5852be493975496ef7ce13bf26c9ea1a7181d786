
         
         <p>When Org resolves the file system path to a link that uses the <code class="language-plaintext highlighter-rouge">file:</code>
hyperlink type, it has a mechanism to decide whether to open that file
in Emacs or an external program. Here is some sample Org markup:</p>

<pre><code class="language-org">A link to [[file:/path/to/test.html][an HTML file]] will open outside Emacs.
</code></pre>

<p>The idea is that some files are best handled by a specialised program,
such as a video with a media player. Generally useful, yes, though
there are cases where we may want to use Emacs. Hence the user option
<code class="language-plaintext highlighter-rouge">org-file-apps</code>.</p>

<p>This option lets us specify a list of cons cells, each of which
consists of a file matcher and method as <code class="language-plaintext highlighter-rouge">(MATCHER . METHOD)</code>. The doc
string describes the technicalities. For my case, the <code class="language-plaintext highlighter-rouge">MATCHER</code> is a
regular expression that targets the file type extension, while the
<code class="language-plaintext highlighter-rouge">METHOD</code> is the <code class="language-plaintext highlighter-rouge">emacs</code> symbol. Thus:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">;; Tell Org to use Emacs when opening files that end in .html</span>
<span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">'org-file-apps</span> <span class="o">'</span><span class="p">(</span><span class="s">"\\.html\\'"</span> <span class="o">.</span> <span class="nv">emacs</span><span class="p">))</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">add-to-list</code> function is especially useful here, because it
appends the element to the existing value of the list. This is what we
probably want in this case as the default value of <code class="language-plaintext highlighter-rouge">org-file-apps</code> has
some reasonable associations already.</p>

<p>I learnt about this after troubleshooting a case with <code class="language-plaintext highlighter-rouge">denote:</code> link
types in Org files (<code class="language-plaintext highlighter-rouge">denote:</code> links are designed to behave like the
<code class="language-plaintext highlighter-rouge">file:</code> type). Org would open HTML files in the browser, making it
awkward to get to an Emacs buffer from where to edit the code. With
Denote in particular, it is common to rename files of any file type
(images, videos, PDFs, â€¦) to have the Denote file-naming scheme and
then link to them from an Org buffer. It is also possible to generate
new files in any writable file type, subject to some configurations.
This was my case, with the use of HTML files.</p>

<p>[ I also wrote a relevant entry about this in the Denote manual. ]</p>

<p>Thankfully, <code class="language-plaintext highlighter-rouge">org-file-apps</code> is there to (i) let us enjoy the power of
opening some <code class="language-plaintext highlighter-rouge">file:</code> (or <code class="language-plaintext highlighter-rouge">denote:</code>) links externally while (ii)
deciding when we want those to be in an Emacs buffer instead.</p>
        
      