
	
<p>
Even with the advent of speech-to-text software, the keyboard is still the most common method to convert thoughts to text. While computers might one day even read our minds, there is something to be said about using your fingers to do the talking. Who would want their’ ums’ and’ ahs’ written down, or their uncensored stream of consciousness committed to text? Writing is as much about thinking and crafting a stream of words as it is about maximising keystrokes per minute.</p>
<p>
Completion systems are like predictive text on a mobile phone. You start typing some characters, and the computer lets you complete your choice. Emacs has an extendable completion system that helps you complete long words, find files, remember function names and other menial tasks. This article explains the basic minibuffer completion engine and introduces some packages extending this functionality.</p>
<p>
This article is part of the <a href="https://lucidmanager.org/tags/emacs/">Emacs Writing Studio</a>, which explains how to use Emacs to undertake research and write and publish articles, books, and websites.</p>
<p>
<a href = "https://github.com/pprevos/emacs-writing-studio/" target="_blank"
   title="Download emacs-writing-studio from GitHub"
   alt="Download emacs-writing-studio from GitHub">
  <button class="button is-medium is-primary">
    <span class="icon is-large">
      <i class="fab fa-github"></i>
    </span>
    <span style="font-family: monospace">emacs-writing-studio</span>
  </button>
</a>

</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Emacs Completion Systems
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>Emacs has three types of <a href="https://www.emacswiki.org/emacs/Completion">completion systems</a>:</p>
<ol>
<li><em>Minibuffer completion</em> assists with picking choices in the minibuffer, such as function names, files and other selections.</li>
<li><em>Keychord completion</em>: Systems to help with keyboard shortcuts.</li>
<li><em>Text completion</em> helps you complete words you type in the buffer (see <a href="https://lucidmanager.org/productivity/writing-prose-with-emacs/">Writing Prose with Emacs</a>).</li>
</ol>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
Minibuffer completion
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>The minibuffer is where you find files, call functions and other vital aspects. The minibuffer completion system aims to make it easier to find what you need by providing a search mechanism that provides a list of possible options.</p>
<p>
The <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html">standard minibuffer Emacs completion system</a> focuses on entering functions, filenames, buffer names and any other selection process in the minibuffer. When typing a partial function or file name, you can hit the <code class="verbatim">TAB</code> key. Emacs will display completion candidates in the minibuffer.</p>
<p>
For example, to evaluate the <code class="verbatim">visual-line-mode</code> function to change how Emacs wraps paragraphs, you type <code class="verbatim">M-x visu</code> and <code class="verbatim">TAB</code>. If you hit <code class="verbatim">TAB</code> after each letter, you’ll notice that Emacs narrows the completion candidates as you get closer to your desired selection.</p>
<p>
This principle also works with variable names and filenames. As you start looking for a filename, use the <code class="verbatim">TAB</code> key to prevent having to type the whole filename. The <code class="verbatim">TAB</code> key is your secret weapon to help you remember and discover functions, variables, file names, buffer names and other selection candidates.</p>
<p>
The minibuffer completion system is highly configurable, and several packages extend this functionality. The approach in this configuration uses a stack of connected packages that provide a seamless experience. This approach showcases the extensibility of Emacs as a modular computing environment. </p>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
Vertico
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>The <a href="info:vertico">Vertico</a> package enhances minibuffer completion. This extension uses incremental search, meaning the list of completion candidates is shortened to match your entry as soon as you type a letter.</p>
<p>
When, for example, opening a file with <code class="verbatim">C-c C-f</code>, you can start typing any part of the filename to locate the file  you seek. Use <code class="verbatim">C-backspace</code> keys to move to a higher directory.</p>
<p>
The <code class="verbatim">savehist</code> package remembers your selections and saves your minibuffer history when exiting Emacs. This package ensures that your most popular choices remain on top for further convenience.</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>  <span style="color:#888">;; MINIBUFFER COMPLETION</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#888">;; Enable vertico</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">use-package</span> <span style="color:#963">vertico</span>
</span></span><span style="display:flex;"><span>    <span style="color:#007020">:init</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#963">vertico-mode</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#007020">:custom</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#963">vertico-sort-function</span> <span style="color:#a60;background-color:#fff0f0">&#39;vertico-sort-history-alpha</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#888">;; Persist history over Emacs restarts.</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">use-package</span> <span style="color:#963">savehist</span>
</span></span><span style="display:flex;"><span>    <span style="color:#007020">:init</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#963">savehist-mode</span>))</span></span></code></pre></div>
</div>
<div id="outline-container-headline-4" class="outline-4">
<h4 id="headline-4">
Orderless
</h4>
<div id="outline-text-headline-4" class="outline-text-4">
<p>To further enhance our ability to find completion candidates, the <a href="https://github.com/oantolin/orderless">orderless package</a> matches patterns, irrespective of the order they are typed in.</p>
<p>
For example, typing <code class="verbatim">use pack TAB</code> provides the same results as <code class="verbatim">pack use TAB</code>. The basic configuration sets some variables for integration with the Vertico completion package.</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>  (<span style="color:#007020">use-package</span> <span style="color:#963">orderless</span>
</span></span><span style="display:flex;"><span>    <span style="color:#007020">:custom</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#963">completion-styles</span> <span style="color:#333">&#39;</span>(<span style="color:#963">orderless</span> <span style="color:#963">basic</span>))
</span></span><span style="display:flex;"><span>    (<span style="color:#963">completion-category-defaults</span> <span style="color:#036;font-weight:bold">nil</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#963">completion-category-overrides</span>
</span></span><span style="display:flex;"><span>     <span style="color:#333">&#39;</span>((<span style="color:#963">file</span> (<span style="color:#963">styles</span> <span style="color:#963">partial-completion</span>)))))</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-5" class="outline-4">
<h4 id="headline-5">
Marginalia
</h4>
<div id="outline-text-headline-5" class="outline-text-4">
<p>Emacs is a self-documenting computing environment, which means that every function and variable includes a text describing what it does.</p>
<p>
The <a href="https://github.com/minad/marginalia">marginala</a> package displays these texts next to your completion candidates. When you now type <code class="verbatim">M-x</code>, you will see a list of functions and a brief description of what they do, making it even easier to find the function you need.</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>  <span style="color:#888">;; Enable richer annotations using the Marginalia package</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">use-package</span> <span style="color:#963">marginalia</span>
</span></span><span style="display:flex;"><span>    <span style="color:#007020">:init</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#963">marginalia-mode</span>))</span></span></code></pre></div>
</div>
<figure>
<img src="https://lucidmanager.org/images/emacs/mini-buffer-completion.jpg" alt="Minibuffer completion with Vertico, Orderless and Marginalia" title="Minibuffer completion with Vertico, Orderless and Marginalia"/>
<figcaption>
Minibuffer completion with Vertico, Orderless and Marginalia.
</figcaption>
</figure>
<p>
This video by Emacs guru Prot explains minibuffer completion in great detail.</p>
<p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/d3aaxOqwHhI?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>
</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-6" class="outline-2">
<h2 id="headline-6">
Help with keyboard shortcuts
</h2>
<div id="outline-text-headline-6" class="outline-text-2">
<p>Completion shortens the amount of text you must type and is excellent for discovering new functionality you did not yet realise existed. However, we usually don’t type function names but use keyboard shortcuts.</p>
<p>
The Marginalia package shows the relevant keyboard shortcut when displaying the completion candidates to help you discover these shortcuts.</p>
<p>
Remembering which keyboard shortcut you need in your next action takes some effort. The <a href="https://github.com/justbur/emacs-which-key#introduction">which-key</a> package is not so much a completion system but a great help when trying to remember which keyboard shortcut to use. This package provides a minor mode that displays the key bindings following the currently-entered incomplete command (a prefix) in a popup.</p>
<p>
Many keyboard shortcuts have multiple parts, such as <code class="verbatim">C-x C-f</code>. The which-key package shows a popup menu that lists all the available options. When, for example, you press <code class="verbatim">C-x</code>, the menu will list all follow-up keys and the function they are bound to. Where it says <code class="verbatim">prefix</code> in the popup, this means that there is a deeper level.</p>
<p>
If the number of shortcuts is too large to fit in the popup window, then you can move to the next page with <code class="verbatim">C-h n</code> and the previous page with <code class="verbatim">C-h p</code>.  Just typing <code class="verbatim">C-h</code> inside the Which-Key popup displays some additional options to navigate the list of key bindings.</p>
<p>
The configuration below displays the popup at the bottom of the screen after you type the partial keyboard shortcut. </p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>  <span style="color:#888">;; Improve keyboard shortcut discoverability</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">use-package</span> <span style="color:#963">which-key</span>
</span></span><span style="display:flex;"><span>    <span style="color:#007020">:config</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#963">which-key-mode</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#963">which-key-setup-side-window-right</span>))</span></span></code></pre></div>
</div>
<figure>
<img src="https://lucidmanager.org/images/emacs/which-key-popup-screen.jpg" alt="Which-Key popup window for Emacs Writing Studio" title="Which-Key popup window for Emacs Writing Studio"/>
<figcaption>
Which-Key popup window for C-x-w (Emacs Writing Studio).
</figcaption>
</figure>
</div>
</div>
<div id="outline-container-headline-7" class="outline-2">
<h2 id="headline-7">
Emacs Writing Studio
</h2>
<div id="outline-text-headline-7" class="outline-text-2">
<p><a href="https://lucidmanager.org/tags/emacs/">Emacs Writing Studio</a> consists of a series articles and a configuration to help you publish articles, books, movie and theatre scripts and websites.</p>
<p>
<a href = "https://github.com/pprevos/emacs-writing-studio/" target="_blank"
   title="Download emacs-writing-studio from GitHub"
   alt="Download emacs-writing-studio from GitHub">
  <button class="button is-medium is-primary">
    <span class="icon is-large">
      <i class="fab fa-github"></i>
    </span>
    <span style="font-family: monospace">emacs-writing-studio</span>
  </button>
</a>

</p>
<p>
Emacs is a malleable system, so everybody will have their personal preferences. Any article on how to use Emacs is thus opinionated. If you have a different way of doing things, please complete the <a href="https://lucidmanager.org/contact/">contact form</a> to send me an email or contact me on social media.</p>
<p>
The next article discusses the <a href="https://lucidmanager.org/productivity/emacs-workflow/">Emacs Writing Studio workflow</a>.</p>
</div>
</div>

      