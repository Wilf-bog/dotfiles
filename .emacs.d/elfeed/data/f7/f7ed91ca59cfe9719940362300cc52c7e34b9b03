
	
<p>
This article contains proposed solutions to the exercises in section 1.1 of  <em>Structure and Interpretation of Computer Programs</em> (SICP) by Abelson, Sussman and Sussman. MIT hosts video lectures to accompany the book on <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/">MIT OpenCourseWare</a>.</p>
<p>
The textbook uses the Scheme dialect of Lisp. I have written these solutions to help me learn Emacs Lisp (Elisp). Some of the solutions are derived from the work by <a href="https://github.com/sarabander/p2pu-sicp">Andres Raba</a>. Most of the solutions include links to the online version of the <a href="https://www.gnu.org/software/emacs/manual/elisp.html">GNU Emacs Lisp Reference Manual</a>.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Chapter 1: The Elements of Programming
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>The first chapter of the textbook introduces the elements of the Lisp language. Harold Abelson starts the lecture with the interesting statement that computer science is neither a science, nor is it about computers, just like physics is not about particle accelerators. </p>
<figure>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/-J_xL4IGhJA?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<figcaption>
Lecture 1A: Overview and Introduction to Lisp.
</figcaption>
</figure>
<p>
The first 28 minutes are an introduction to computer programming, after which the LISP lecture starts.</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
Exercise 1.1
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.</p>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
Answer
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>In Emacs, you can type this code in the scratch buffer and evaluate an expression with the <code class="verbatim">eval-last-sexp</code> function or the <code class="verbatim">C-x C-e</code> keyboard shortcut, placing the cursor after the end of the expression. The <code class="verbatim">eval-last-sexp</code> function evaluates the last expression before the cursor (point). The results will appear in the minibuffer at the bottom of the screen.</p>
<p>
Emacs also has a REPL (Read-Eval-Print Loop), which you can access with <code class="verbatim">M-x ielm</code>. In REPL mode, the results appear below the expression after you hit enter.</p>
<p>
Emacs provides the result in decimal numbers. The output between parenthesis is the result in octal (<code class="verbatim">#o</code>) and hexadecimal (<code class="verbatim">#x</code>) numeral system, e.g.: <code class="verbatim">1969 (#o3661, #x7b1)</code>. For values below 128, the output also includes an associated character, e.g. <code class="verbatim">26 (#o32 #x1a ?\C-z)</code>, where z is the character 26 in <a href="https://en.wikipedia.org/wiki/ASCII">ASCII</a>.</p>
<p>
The code below shows the solutions in the comments after the expressions. The first lines demonstrate <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Arithmetic-Operations.html">Arithmetic Operations</a> in Emacs Lisp. Lisp uses <a href="https://en.wikipedia.org/wiki/Polish_notation">Polish notation</a> to resolve mathematical expressions. In this system, the operatore precede the operands, e.g. <code class="verbatim">+ 3 4</code> is the same as $3+4$ in <a href="https://en.wikipedia.org/wiki/Infix_notation">infix notation</a>.</p>
<p>
The second set of expressions demonstrates <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Setting-Variables.html">setting variable values</a>. The <code class="verbatim">setq</code> function sets universal variables. The q relates to the fact that the variable name is quoted. Without quoting the variable (the <code class="verbatim">set</code> function), Emacs will evaluate the name of the variable as a function and cause an error. You can also add a quotation mark to prevent Emacs from evaluating an expression. The following two expressions have the same result:</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>  <span style="color:#888">;; Equivalent expressions</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">setq</span> <span style="color:#963">a</span> <span style="color:#00d;font-weight:bold">10</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#06b;font-weight:bold">set</span> <span style="color:#a60;background-color:#fff0f0">&#39;a</span> <span style="color:#00d;font-weight:bold">10</span>)</span></span></code></pre></div>
</div>
<p>
Emacs is a self-documenting editor and you can document your programming on the fly. The <code class="verbatim">defvar</code> function allows you to define a new variable plus a documentation string. This function is helpful when the variable will be available to other users. The help string that you define is available through the help function with the <code class="verbatim">C-h v</code> shortcut.</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>  <span style="color:#888">;; Arithmetic operations</span>
</span></span><span style="display:flex;"><span>  <span style="color:#00d;font-weight:bold">10</span> <span style="color:#888">; =&gt; 10</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#00d;font-weight:bold">5</span> <span style="color:#00d;font-weight:bold">3</span> <span style="color:#00d;font-weight:bold">4</span>) <span style="color:#888">; =&gt; 12</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#00d;font-weight:bold">9</span> <span style="color:#00d;font-weight:bold">1</span>) <span style="color:#888">; =&gt; 8</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#06b;font-weight:bold">/</span> <span style="color:#00d;font-weight:bold">6</span> <span style="color:#00d;font-weight:bold">2</span>) <span style="color:#888">; =&gt; 3</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#06b;font-weight:bold">+</span> (<span style="color:#06b;font-weight:bold">*</span> <span style="color:#00d;font-weight:bold">2</span> <span style="color:#00d;font-weight:bold">4</span>) (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#00d;font-weight:bold">4</span> <span style="color:#00d;font-weight:bold">6</span>)) <span style="color:#888">; =&gt; 10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#888">;; Seting variable names</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">setq</span> <span style="color:#963">a</span> <span style="color:#00d;font-weight:bold">3</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">setq</span> <span style="color:#963">b</span> (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#963">a</span> <span style="color:#00d;font-weight:bold">1</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">setq</span> <span style="color:#963">a</span> <span style="color:#00d;font-weight:bold">3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#963">b</span> (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#963">a</span> <span style="color:#00d;font-weight:bold">1</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">defvar</span> <span style="color:#963">example</span> (<span style="color:#06b;font-weight:bold">*</span> <span style="color:#963">a</span> <span style="color:#963">b</span>)
</span></span><span style="display:flex;"><span>    <span style="background-color:#fff0f0">&#34;An example of a documented variable.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#963">a</span> <span style="color:#963">b</span> (<span style="color:#06b;font-weight:bold">*</span> <span style="color:#963">a</span> <span style="color:#963">b</span>)) <span style="color:#888">; =&gt; 19</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#06b;font-weight:bold">=</span> <span style="color:#963">a</span> <span style="color:#963">b</span>) <span style="color:#888">; =&gt; nil</span></span></span></code></pre></div>
</div>
<p>
These last lines of code look provide an example of basic <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Conditionals.html">conditionals</a>. The first expression is a an if-then-else statement. The second expression is a conditional. The last clause is executed when none of the other conditions is true. The <code class="verbatim">t</code> parameter ensures that this expression is always evaluated.</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>    <span style="color:#888">;; Conditionals</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">if</span> (<span style="color:#007020">and</span> (<span style="color:#06b;font-weight:bold">&gt;</span> <span style="color:#963">b</span> <span style="color:#963">a</span>) (<span style="color:#06b;font-weight:bold">&lt;</span> <span style="color:#963">b</span> (<span style="color:#06b;font-weight:bold">*</span> <span style="color:#963">a</span> <span style="color:#963">b</span>)))
</span></span><span style="display:flex;"><span>        <span style="color:#963">b</span>
</span></span><span style="display:flex;"><span>      <span style="color:#963">a</span>) <span style="color:#888">;; =&gt; 4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">cond</span> ((<span style="color:#06b;font-weight:bold">=</span> <span style="color:#963">a</span> <span style="color:#00d;font-weight:bold">4</span>) <span style="color:#00d;font-weight:bold">6</span>)
</span></span><span style="display:flex;"><span>          ((<span style="color:#06b;font-weight:bold">=</span> <span style="color:#963">b</span> <span style="color:#00d;font-weight:bold">4</span>) (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#00d;font-weight:bold">6</span> <span style="color:#00d;font-weight:bold">7</span> <span style="color:#963">a</span>))
</span></span><span style="display:flex;"><span>          (<span style="color:#036;font-weight:bold">t</span> <span style="color:#00d;font-weight:bold">25</span>)) <span style="color:#888">;;=&gt; 16</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#00d;font-weight:bold">2</span> (<span style="color:#007020">if</span> (<span style="color:#06b;font-weight:bold">&gt;</span> <span style="color:#963">b</span> <span style="color:#963">a</span>) <span style="color:#963">b</span> <span style="color:#963">a</span>)) <span style="color:#888">; =&gt; 6</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    (<span style="color:#06b;font-weight:bold">*</span> (<span style="color:#007020">cond</span> ((<span style="color:#06b;font-weight:bold">&gt;</span> <span style="color:#963">a</span> <span style="color:#963">b</span>) <span style="color:#963">a</span>)
</span></span><span style="display:flex;"><span>             ((<span style="color:#06b;font-weight:bold">&lt;</span> <span style="color:#963">a</span> <span style="color:#963">b</span>) <span style="color:#963">b</span>)
</span></span><span style="display:flex;"><span>             (<span style="color:#036;font-weight:bold">t</span> <span style="color:#00d;font-weight:bold">-1</span>))
</span></span><span style="display:flex;"><span>       (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#963">a</span> <span style="color:#00d;font-weight:bold">1</span>)) <span style="color:#888">;; =&gt; 16</span></span></span></code></pre></div>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-4" class="outline-2">
<h2 id="headline-4">
Exercise 1.2
</h2>
<div id="outline-text-headline-4" class="outline-text-2">
<p>Translate the following expression into prefix form:</p>
<p>
$$\frac{5 + 4 + (2 - (3 - (6 + \frac{5}{4})))}{3(6 - 2)(2 - 7)}$$</p>
<div id="outline-container-headline-5" class="outline-3">
<h3 id="headline-5">
Answer
</h3>
<div id="outline-text-headline-5" class="outline-text-3">
<p>When Emacs Lisp divides two integers, the outcome will also be integer, e.g. <code class="verbatim">(/ 22 7)</code> results in 3 instead of 3.142… To force a floating point output, add a decimal to one of the parameters: <code class="verbatim">(/ 22 7.0)</code>.</p>
<p>
Elisp can evaluate this expression in a single line, but it becomes hard to read.  This example demonstrates the multitude of parenthesis in Lisp expressions. Some people jokingly suggest that Lisp means “Lots of Irritating Superfluous Parentheses”. The <a href="https://github.com/Fuco1/smartparens">smartparens</a> package can help you write code.</p>
<p>
<a href="https://en.wikipedia.org/wiki/Prettyprint">Prettyprinting</a> is a way to format source code to make it easier for human readers to understand. In Emacs, you can convert a convoluted expression to prettyprinting with the <code class="verbatim">pp-macroexpand-last-sexp</code> function. Run this function at the end of an expression, and the <code class="verbatim">pp</code> package, the pretty printer for Emacs Lisp, will provide a better formatted version.</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>  (<span style="color:#06b;font-weight:bold">/</span> (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#00d;font-weight:bold">5</span> <span style="color:#00d;font-weight:bold">4</span> (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#00d;font-weight:bold">2</span> (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#00d;font-weight:bold">3</span> (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#00d;font-weight:bold">6</span> (<span style="color:#06b;font-weight:bold">/</span> <span style="color:#60e;font-weight:bold">4.0</span> <span style="color:#00d;font-weight:bold">5</span>))))) (<span style="color:#06b;font-weight:bold">*</span> <span style="color:#00d;font-weight:bold">3</span> (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#00d;font-weight:bold">6</span> <span style="color:#00d;font-weight:bold">2</span> ) (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#00d;font-weight:bold">2</span> <span style="color:#00d;font-weight:bold">7</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#888">;; Pretty printing (pp-macroexpand-last-sexp)</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#06b;font-weight:bold">/</span>
</span></span><span style="display:flex;"><span>   (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#00d;font-weight:bold">5</span> <span style="color:#00d;font-weight:bold">4</span>
</span></span><span style="display:flex;"><span>      (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#00d;font-weight:bold">2</span>
</span></span><span style="display:flex;"><span>         (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#00d;font-weight:bold">3</span>
</span></span><span style="display:flex;"><span>            (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#00d;font-weight:bold">6</span>
</span></span><span style="display:flex;"><span>               (<span style="color:#06b;font-weight:bold">/</span> <span style="color:#60e;font-weight:bold">4.0</span> <span style="color:#00d;font-weight:bold">5</span>)))))
</span></span><span style="display:flex;"><span>   (<span style="color:#06b;font-weight:bold">*</span> <span style="color:#00d;font-weight:bold">3</span>
</span></span><span style="display:flex;"><span>      (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#00d;font-weight:bold">6</span> <span style="color:#00d;font-weight:bold">2</span> )
</span></span><span style="display:flex;"><span>      (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#00d;font-weight:bold">2</span> <span style="color:#00d;font-weight:bold">7</span>)))</span></span></code></pre></div>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-6" class="outline-2">
<h2 id="headline-6">
Exercise 1.3
</h2>
<div id="outline-text-headline-6" class="outline-text-2">
<p>Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.</p>
<div id="outline-container-headline-7" class="outline-3">
<h3 id="headline-7">
Answer
</h3>
<div id="outline-text-headline-7" class="outline-text-3">
<p><code class="verbatim">defun</code> declares a new <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Functions.html">function in Emacs Lisp</a>. The name of the function appears after <code class="verbatim">defun</code> and its parameters are listed between parentheses. The quoted string on the next line is the documentation. The doc string will be accessible via the Emacs help functions.</p>
<p>
The <code class="verbatim">square</code> function returns the square of a number and the <code class="verbatim">sum-of-squares</code> helper function produces the sum of squares. The main function determines the two largest numbers of three and provides the sum of their squares..</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>  <span style="color:#888">;; Exercise 1.3</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">defun</span> <span style="color:#963">square</span> (<span style="color:#963">a</span>)
</span></span><span style="display:flex;"><span>    <span style="background-color:#fff0f0">&#34;Squaring a number&#34;</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#06b;font-weight:bold">*</span> <span style="color:#963">a</span> <span style="color:#963">a</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">defun</span> <span style="color:#963">sum-of-squares</span> (<span style="color:#963">a</span> <span style="color:#963">b</span>) 
</span></span><span style="display:flex;"><span>    <span style="background-color:#fff0f0">&#34;Sum the squares of two numbers&#34;</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#06b;font-weight:bold">+</span>
</span></span><span style="display:flex;"><span>     (<span style="color:#963">square</span> <span style="color:#963">a</span>)
</span></span><span style="display:flex;"><span>     (<span style="color:#963">square</span> <span style="color:#963">b</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">defun</span> <span style="color:#963">largest-sum-of-squares</span> (<span style="color:#963">a</span> <span style="color:#963">b</span> <span style="color:#963">c</span>)
</span></span><span style="display:flex;"><span>    <span style="background-color:#fff0f0">&#34;Find the largest sum of squares for two out of three numbers&#34;</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">cond</span> ((<span style="color:#007020">and</span> (<span style="color:#06b;font-weight:bold">&lt;</span> <span style="color:#963">a</span> <span style="color:#963">b</span>) (<span style="color:#06b;font-weight:bold">&lt;</span> <span style="color:#963">a</span> <span style="color:#963">c</span>)) (<span style="color:#963">sum-of-squares</span> <span style="color:#963">b</span> <span style="color:#963">c</span>))
</span></span><span style="display:flex;"><span>          ((<span style="color:#007020">and</span> (<span style="color:#06b;font-weight:bold">&lt;</span> <span style="color:#963">b</span> <span style="color:#963">a</span>) (<span style="color:#06b;font-weight:bold">&lt;</span> <span style="color:#963">b</span> <span style="color:#963">c</span>)) (<span style="color:#963">sum-of-squares</span> <span style="color:#963">a</span> <span style="color:#963">c</span>))
</span></span><span style="display:flex;"><span>          (<span style="color:#036;font-weight:bold">t</span> (<span style="color:#963">sum-of-squares</span> <span style="color:#963">a</span> <span style="color:#963">b</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  (<span style="color:#963">largest-sum-of-squares</span> <span style="color:#00d;font-weight:bold">2</span> <span style="color:#00d;font-weight:bold">3</span> <span style="color:#00d;font-weight:bold">5</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#963">largest-sum-of-squares</span> <span style="color:#00d;font-weight:bold">3</span> <span style="color:#00d;font-weight:bold">2</span> <span style="color:#00d;font-weight:bold">5</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#963">largest-sum-of-squares</span> <span style="color:#00d;font-weight:bold">5</span> <span style="color:#00d;font-weight:bold">2</span> <span style="color:#00d;font-weight:bold">3</span>)</span></span></code></pre></div>
</div>
<p>
The three functions are bow available through the whole Emacs session. The variables are only available within each function (<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Scoping.html">scoping rules</a>).</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-8" class="outline-2">
<h2 id="headline-8">
Exercise 1.4
</h2>
<div id="outline-text-headline-8" class="outline-text-2">
<p>Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>  (<span style="color:#007020">defun</span> <span style="color:#963">a-plus-abs-b</span> (<span style="color:#963">a</span> <span style="color:#963">b</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#06b;font-weight:bold">funcall</span>
</span></span><span style="display:flex;"><span>     (<span style="color:#007020">if</span> (<span style="color:#06b;font-weight:bold">&gt;</span> <span style="color:#963">b</span> <span style="color:#00d;font-weight:bold">0</span>)
</span></span><span style="display:flex;"><span>         <span style="color:#a60;background-color:#fff0f0">&#39;+</span>
</span></span><span style="display:flex;"><span>       <span style="color:#a60;background-color:#fff0f0">&#39;-</span>)
</span></span><span style="display:flex;"><span>     <span style="color:#963">a</span> <span style="color:#963">b</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  (<span style="color:#963">a-plus-abs-b</span> <span style="color:#00d;font-weight:bold">10</span> <span style="color:#00d;font-weight:bold">-20</span>)</span></span></code></pre></div>
</div>
<div id="outline-container-headline-9" class="outline-3">
<h3 id="headline-9">
Answer
</h3>
<div id="outline-text-headline-9" class="outline-text-3">
<p>The function evaluates as follows:</p>
<ul>
<li>If <code class="verbatim">b</code> is positive, the function evaluates <code class="verbatim">(+ a b)</code></li>
<li>If <code class="verbatim">b</code> is negative, the function evaluates <code class="verbatim">(- a b)</code></li>
</ul>
<p><code class="verbatim">funcall</code> evaluates the expression <code class="verbatim">(if (&gt; b 0) &#39;+ &#39;-))</code> and uses the result (either + or -) as a function. The quote is needed to ensure the <code class="verbatim">+</code> and <code class="verbatim">-</code> are not evaluated in the conditional.</p>
<p>
The original Scheme implementation used in the book and lectures did not use a function call. Scheme is a Lisp-1 and Emacs Lisp is Lisp-2. In scheme names and procedures are located in the same namespace, so it is possible to return a procedure name from a condition and evaluate it. In Lisp-2, procedures have their own namespace, so in order to call procedure from name you have to use <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Calling-Functions.html">funcal</a> (Source: <a href="https://www.reddit.com/r/emacs/comments/g89q2y/learning_elisp_need_some_help/">/u/andreyorst</a>).</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-10" class="outline-2">
<h2 id="headline-10">
Exercise 1.5
</h2>
<div id="outline-text-headline-10" class="outline-text-2">
<p>Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using <a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Comparison_of_applicative_order_and_normal_order_evaluation">applicative-order evaluation or normal-order evaluation</a>. He defines the following two procedures:</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>(<span style="color:#007020">defun</span> <span style="color:#963">p</span> () (<span style="color:#963">p</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#007020">defun</span> <span style="color:#963">test</span> (<span style="color:#963">x</span> <span style="color:#963">y</span>) 
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">if</span> (<span style="color:#06b;font-weight:bold">=</span> <span style="color:#963">x</span> <span style="color:#00d;font-weight:bold">0</span>) 
</span></span><span style="display:flex;"><span>      <span style="color:#00d;font-weight:bold">0</span> 
</span></span><span style="display:flex;"><span>      <span style="color:#963">y</span>))</span></span></code></pre></div>
</div>
<p>
Then he evaluates the expression:</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>(<span style="color:#963">test</span> <span style="color:#00d;font-weight:bold">0</span> (<span style="color:#963">p</span>))</span></span></code></pre></div>
</div>
<p>
What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)</p>
<div id="outline-container-headline-11" class="outline-3">
<h3 id="headline-11">
Answer
</h3>
<div id="outline-text-headline-11" class="outline-text-3">
<ul>
<li>Applicative order: The function call results in an infinite loop, as the function <code class="verbatim">p</code> calls itself (Emacs&#39; behaviour).</li>
<li>Normal order: The function never reaches <code class="verbatim">p</code> because it exits with 0 as a result.</li>
</ul>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-12" class="outline-2">
<h2 id="headline-12">
Exercise 1.6
</h2>
<div id="outline-text-headline-12" class="outline-text-2">
<p>Alyssa P. Hacker doesn&#39;t see why <code class="verbatim">if</code> needs to be provided as a special form. “Why can’t I just define it as an ordinary procedure in terms of <code class="verbatim">cond</code>?” she asks. Alyssa’s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>  (<span style="color:#007020">defun</span> <span style="color:#963">new-if</span> (<span style="color:#963">predicate</span> <span style="color:#963">then-clause</span> <span style="color:#963">else-clause</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">cond</span> (<span style="color:#963">predicate</span> <span style="color:#963">then-clause</span>)
</span></span><span style="display:flex;"><span>          (<span style="color:#036;font-weight:bold">t</span> <span style="color:#963">else-clause</span>)))</span></span></code></pre></div>
</div>
<p>
Eva demonstrates the program for Alyssa:</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>(<span style="color:#963">new-if</span> (<span style="color:#06b;font-weight:bold">=</span> <span style="color:#00d;font-weight:bold">2</span> <span style="color:#00d;font-weight:bold">3</span>) <span style="color:#00d;font-weight:bold">0</span> <span style="color:#00d;font-weight:bold">5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#963">new-if</span> (<span style="color:#06b;font-weight:bold">=</span> <span style="color:#00d;font-weight:bold">1</span> <span style="color:#00d;font-weight:bold">1</span>) <span style="color:#00d;font-weight:bold">0</span> <span style="color:#00d;font-weight:bold">5</span>)</span></span></code></pre></div>
</div>
<p>
Delighted, Alyssa uses new-if to rewrite the square-root program:</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>(<span style="color:#007020">defun</span> <span style="color:#963">sqrt-iter</span> (<span style="color:#963">guess</span> <span style="color:#963">x</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#963">new-if</span> (<span style="color:#963">good-enough?</span> <span style="color:#963">guess</span> <span style="color:#963">x</span>)
</span></span><span style="display:flex;"><span>          <span style="color:#963">guess</span>
</span></span><span style="display:flex;"><span>          (<span style="color:#963">sqrt-iter</span> (<span style="color:#963">improve</span> <span style="color:#963">guess</span> <span style="color:#963">x</span>) <span style="color:#963">x</span>)))</span></span></code></pre></div>
</div>
<p>
What happens when Alyssa attempts to use this to compute square roots? Explain.</p>
<div id="outline-container-headline-13" class="outline-3">
<h3 id="headline-13">
Answer
</h3>
<div id="outline-text-headline-13" class="outline-text-3">
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>  (<span style="color:#007020">defun</span> <span style="color:#06b;font-weight:bold">sqrt</span> (<span style="color:#963">x</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">defun</span> <span style="color:#963">square</span> (<span style="color:#963">x</span>)
</span></span><span style="display:flex;"><span>      (<span style="color:#06b;font-weight:bold">*</span> <span style="color:#963">x</span> <span style="color:#963">x</span>))
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">defun</span> <span style="color:#963">good-enough?</span> (<span style="color:#963">guess</span>)
</span></span><span style="display:flex;"><span>      (<span style="color:#06b;font-weight:bold">&lt;</span> (<span style="color:#06b;font-weight:bold">abs</span> (<span style="color:#06b;font-weight:bold">-</span> (<span style="color:#963">square</span> <span style="color:#963">guess</span>) <span style="color:#963">x</span>)) <span style="color:#60e;font-weight:bold">0.001</span>))
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">defun</span> <span style="color:#963">average</span> (<span style="color:#963">a</span> <span style="color:#963">b</span>)
</span></span><span style="display:flex;"><span>      (<span style="color:#06b;font-weight:bold">/</span> (<span style="color:#06b;font-weight:bold">+</span> <span style="color:#963">a</span> <span style="color:#963">b</span>) <span style="color:#60e;font-weight:bold">2.0</span>))
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">defun</span> <span style="color:#963">improve</span> (<span style="color:#963">guess</span>)
</span></span><span style="display:flex;"><span>      (<span style="color:#963">average</span> <span style="color:#963">guess</span> (<span style="color:#06b;font-weight:bold">/</span> <span style="color:#963">x</span> <span style="color:#963">guess</span>)))
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">defun</span> <span style="color:#963">sqrt-iter</span> (<span style="color:#963">guess</span>)
</span></span><span style="display:flex;"><span>      (<span style="color:#963">new-if</span> (<span style="color:#963">good-enough?</span> <span style="color:#963">guess</span>)
</span></span><span style="display:flex;"><span>              <span style="color:#963">guess</span>
</span></span><span style="display:flex;"><span>              (<span style="color:#963">sqrt-iter</span> (<span style="color:#963">improve</span> <span style="color:#963">guess</span>))))
</span></span><span style="display:flex;"><span>    (<span style="color:#963">sqrt-iter</span> <span style="color:#60e;font-weight:bold">1.0</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  (<span style="color:#06b;font-weight:bold">sqrt</span> <span style="color:#00d;font-weight:bold">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#963">average</span> <span style="color:#00d;font-weight:bold">12</span> <span style="color:#00d;font-weight:bold">13</span>)</span></span></code></pre></div>
</div>
<p>
The version with <code class="verbatim">new-if</code> function crashes because of a nesting error (<code class="verbatim">Lisp nesting exceeds ‘max-lisp-eval-depth</code>). The <code class="verbatim">sqrt</code> function works fine with the regular <code class="verbatim">if</code> function.</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-14" class="outline-2">
<h2 id="headline-14">
Exercise 1.7
</h2>
<div id="outline-text-headline-14" class="outline-text-2">
<p>The <code class="verbatim">good-enough?</code> test used in computing square roots will not be effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for huge numbers.</p>
<p>
Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing <code class="verbatim">good-enough?</code>,is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess.</p>
<p>
Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?</p>
<div id="outline-container-headline-15" class="outline-3">
<h3 id="headline-15">
Answer
</h3>
<div id="outline-text-headline-15" class="outline-text-3">
<p>The <code class="verbatim">float</code> function forces floating point answers. See Elisp manual about <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Numeric-Conversions.html">Numeric Conversions</a>.</p>
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>  <span style="color:#888">;; Exercise 1.7</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">defun</span> <span style="color:#963">sqrt-heron</span> (<span style="color:#963">x</span>)
</span></span><span style="display:flex;"><span>    <span style="background-color:#fff0f0">&#34;Determine a square root using Heron’s method.&#34;</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">defun</span> <span style="color:#963">avg</span> (<span style="color:#963">x</span> <span style="color:#963">y</span>) (<span style="color:#06b;font-weight:bold">/</span> (<span style="color:#06b;font-weight:bold">+</span> (<span style="color:#06b;font-weight:bold">float</span> <span style="color:#963">x</span>) <span style="color:#963">y</span>) <span style="color:#00d;font-weight:bold">2</span>))
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">defun</span> <span style="color:#06b;font-weight:bold">abs</span> (<span style="color:#963">x</span>) (<span style="color:#007020">if</span> (<span style="color:#06b;font-weight:bold">&lt;</span> <span style="color:#963">x</span> <span style="color:#00d;font-weight:bold">0</span>) (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#963">x</span>) <span style="color:#963">x</span> ))
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">defun</span> <span style="color:#963">improve</span> (<span style="color:#963">guess</span>)
</span></span><span style="display:flex;"><span>      (<span style="color:#963">avg</span> <span style="color:#963">guess</span> (<span style="color:#06b;font-weight:bold">/</span> <span style="color:#963">x</span> <span style="color:#963">guess</span>)))
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">defun</span> <span style="color:#963">good-enough?</span> (<span style="color:#963">guess</span> <span style="color:#963">next-guess</span>)
</span></span><span style="display:flex;"><span>      (<span style="color:#06b;font-weight:bold">&lt;</span> (<span style="color:#06b;font-weight:bold">abs</span> (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#963">guess</span> <span style="color:#963">next-guess</span>)) <span style="color:#60e;font-weight:bold">1e-20</span>))
</span></span><span style="display:flex;"><span>    (<span style="color:#007020">defun</span> <span style="color:#963">try</span> (<span style="color:#963">guess</span>)
</span></span><span style="display:flex;"><span>      (<span style="color:#007020">if</span> (<span style="color:#963">good-enough?</span> <span style="color:#963">guess</span> (<span style="color:#963">improve</span> <span style="color:#963">guess</span>))
</span></span><span style="display:flex;"><span>          <span style="color:#963">guess</span>
</span></span><span style="display:flex;"><span>        (<span style="color:#963">try</span> (<span style="color:#963">improve</span> <span style="color:#963">guess</span>))))
</span></span><span style="display:flex;"><span>    (<span style="color:#963">try</span> <span style="color:#60e;font-weight:bold">1.0</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  (<span style="color:#963">sqrt-heron</span> <span style="color:#00d;font-weight:bold">1234567890</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#06b;font-weight:bold">*</span> (<span style="color:#963">sqrt-heron</span> <span style="color:#60e;font-weight:bold">1e-5</span>) (<span style="color:#963">sqrt-heron</span> <span style="color:#60e;font-weight:bold">1e-5</span>))</span></span></code></pre></div>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-16" class="outline-2">
<h2 id="headline-16">
Exercise 1.8
</h2>
<div id="outline-text-headline-16" class="outline-text-2">
<p>Newton’s method for cube roots is based on the fact that if $y$ is an approximation to the cube root of $x$, then a better approximation is given by the value:</p>
<p>
$$\frac{x/y^2 +2y}{3}$$</p>
<p>
Use this formula to implement a cube-root procedure analogous to the square-root procedure.</p>
<div id="outline-container-headline-17" class="outline-3">
<h3 id="headline-17">
Answer
</h3>
<div id="outline-text-headline-17" class="outline-text-3">
<div class="src src-elisp">
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>  <span style="color:#888">;; Exercise 1.8</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#007020">defun</span> <span style="color:#963">cube-root-newton</span> (<span style="color:#963">x</span>)
</span></span><span style="display:flex;"><span>    <span style="background-color:#fff0f0">&#34;Newton’s method for cube roots&#34;</span>
</span></span><span style="display:flex;"><span>      (<span style="color:#007020">defun</span> <span style="color:#06b;font-weight:bold">abs</span> (<span style="color:#963">x</span>) (<span style="color:#007020">if</span> (<span style="color:#06b;font-weight:bold">&lt;</span> <span style="color:#963">x</span> <span style="color:#00d;font-weight:bold">0</span>) (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#963">x</span>) <span style="color:#963">x</span> ))
</span></span><span style="display:flex;"><span>      (<span style="color:#007020">defun</span> <span style="color:#963">improve</span> (<span style="color:#963">guess</span>)
</span></span><span style="display:flex;"><span>          (<span style="color:#06b;font-weight:bold">/</span> (<span style="color:#06b;font-weight:bold">+</span> (<span style="color:#06b;font-weight:bold">/</span> <span style="color:#963">x</span> (<span style="color:#06b;font-weight:bold">*</span> <span style="color:#963">guess</span> <span style="color:#963">guess</span>)) (<span style="color:#06b;font-weight:bold">*</span> <span style="color:#00d;font-weight:bold">2</span> <span style="color:#963">guess</span>)) <span style="color:#60e;font-weight:bold">3.0</span>))
</span></span><span style="display:flex;"><span>      (<span style="color:#007020">defun</span> <span style="color:#963">good-enough?</span> (<span style="color:#963">guess</span> <span style="color:#963">next-guess</span>)
</span></span><span style="display:flex;"><span>          (<span style="color:#06b;font-weight:bold">&lt;</span> (<span style="color:#06b;font-weight:bold">abs</span> (<span style="color:#06b;font-weight:bold">-</span> <span style="color:#963">guess</span> <span style="color:#963">next-guess</span>)) <span style="color:#60e;font-weight:bold">1e-20</span>))
</span></span><span style="display:flex;"><span>      (<span style="color:#007020">defun</span> <span style="color:#963">try</span> (<span style="color:#963">guess</span>)
</span></span><span style="display:flex;"><span>          (<span style="color:#007020">if</span> (<span style="color:#963">good-enough?</span> <span style="color:#963">guess</span> (<span style="color:#963">improve</span> <span style="color:#963">guess</span>))
</span></span><span style="display:flex;"><span>              <span style="color:#963">guess</span>
</span></span><span style="display:flex;"><span>              (<span style="color:#963">try</span> (<span style="color:#963">improve</span> <span style="color:#963">guess</span>))))
</span></span><span style="display:flex;"><span>      (<span style="color:#963">try</span> <span style="color:#60e;font-weight:bold">1.0</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  (<span style="color:#963">cube-root-newton</span> (<span style="color:#06b;font-weight:bold">*</span> <span style="color:#00d;font-weight:bold">4</span> <span style="color:#00d;font-weight:bold">4</span> <span style="color:#00d;font-weight:bold">4</span>))
</span></span><span style="display:flex;"><span>  (<span style="color:#963">cube-root-newton</span> <span style="color:#60e;font-weight:bold">1e-5</span>)</span></span></code></pre></div>
</div>
</div>
</div>
</div>
</div>

      