#+title: Emacs configuration
#+author: Frédéric Vachon
#+property: header-args:emacs-lisp :mkdirp yes
#+startup: content indent

This is a new configuration for my own personal use of Emacs starting
on September 1st of 2025. After a few years of playing with Emacs,
using distributions, and copying code from a variety of sources, I've
decided it was finally time to start afresh and actually write my very
own personal configuration. I'll probably keep on integrating code
from other configurations, but the goal is to be more careful and
meticulous in my use of external code. Hopefully, this configuration
will remain short enough to be manageable for me, considering my
limited time and abilities. This whole decision is partly inspired by
Jake's video on Emacs Bankruptcy which can be watched here: [[https://www.youtube.com/watch?v=dSlMmCD5quc&t=200s][Emacs
bankruptcy – fix your Emacs and your life]].

This configuration takes inspiration of a few Emacs users I've been
following over the years and I would like to thank them for their
contribution.
- Protesilaos Stravou

* TODO Early initialisation of Emacs (=early-init.el=)

This is a new concept to me as I didn't use an =early-init.el= file
before. From my understanding, since Emacs 27, this file is used to
push configuration that are loaded very early during Emacs'
initialization.

I took heavy inspiration (understand, copying) from Prot's own
configuration here, removing what seems to be pertinent in my own
situation. I kept some settings useful in a tiling window manager
configuration, like frame-resize-pixelwise, even though I tend to only
use Gnome these days. Sway may make a return someday and I would
rather avoid having to play with these settings later on.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq frame-resize-pixelwise t
        frame-title-format '("%b")	; Name of file as the title of the frame
        use-file-dialog nil
        use-short-answers t
        inhibit-startup-screen t
        inhibit-x-resources t
        inhibit-startup-echo-area-message user-login-name
        inhibit-startup-buffer-menu t
        visible-bell t
        )
#+end_src

To make things faster at startup and for my own personal preferences,
I disable early on the GUI parts of emacs.

#+begin_src emacs-lisp :tangle "early-init.el"
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars . nil) default-frame-alist)
#+end_src

This is mysterious for me, but these settings for garbage-collection
should help with faster boot time.

#+begin_src emacs-lisp :tangle "early-init.el"
(setq gc-cons-threshold (* 10 128 1024 1024))
(setq garbage-collection-messages nil)
#+end_src

* TODO Emacs settings (=init.el=)

In this larger part of my configuration, I list out all the settings
that are part of the normal initialisation process.

** TODO Emacs essential settings

Considering I work on multiple machines, sometimes at the same time,
and that I rely on Git for many config files, I prefer to
automatically revert the buffers I'm using (files and dired buffers
for example.

** Emacs custom-file

Departing from Emacs Writing Studio defaults, I prefer to stop using
Emacs' config file way of managing settings. Like Prot, I ask Emacs to
rely a temporary file that won't be automatically reloaded.

#+begin_src emacs-lisp :tangle "init.el"
(setq custom-file (make-temp-file "emacs-custom-"))
#+end_src

** TODO Emacs windows settings

I used to use a =M-o= to switch window quickly but in line with my
goal of keeping things minimal and to stay close to Emacs' defaults, I
want to get used to =C-x o=. I also used to use a package called
=balanced-windows= but again I'm tempted to stay away from it for the
moment, and get used to the command =C-x +=.
#+begin_src emacs-lisp :tangle "init.el"

#+end_src

** TODO Usepackage settings

For the moment, my configuration rely only on usepackage that I find
intuiive. I do usually rely on MELPA for certain packages.

#+begin_src emacs-lisp :tangle "init.el"
  ;; Set package archives

  (use-package package
    :config
    (add-to-list 'package-archives
                 '("melpa" . "https://melpa.org/packages/"))
    (package-initialize))

  ;; Package Management

  (use-package use-package
    :custom
    (use-package-always-ensure nil)	; older config had it true.
    (package-native-compile t)
    (warning-minimum-level :emergency))
#+end_src

** TODO Emacs theme settings

To avoid getting asked about trusting themes, we can tell it to treat
all themes as safe by default. I use only a few themes.

#+begin_src emacs-lisp :tangle "init.el"
  (setq custom-safe-themes t)
#+end_src

For now, I'm running =modus-vivendi-tinted=. I do intend on
reimplementing a function to automatically switch between a dark and
light theme depending on GNOME's settings.

#+begin_src emacs-lisp :tangle "init.el"
  (load-theme 'modus-vivendi-tinted :no-confirm)
#+end_src

* TODO External packages settings (=init.el=)

I decided to create a separate section this from the precedent to keep
a closer eye on the specific packages I'm adding to my
configuration. We will see if this will remain a sensible option as
the configuration grows.

** TODO Git

For git, I tend to prefer Magit even though it is probably overkill
considering my limited use of git in general. I do enjoy how the tool
is structured and until I take the time to learn emacs own way of
managing git and other software like this, I'll keep on using Magit.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package magit
    :ensure t)

  (add-hook 'magit-process-find-password-functions
  	  'magit-process-password-auth-source)
#+end_src

** TODO Orderless

An essential external package. Allows to have more relevant results
when searching for something since order is not an issue anymore.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides
     '((file (styles partial-completion)))))
#+end_src
